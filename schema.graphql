type Message {
  id: ID!
  content: String!
  owner: String!
  createdAt: AWSDateTime
  roomId: ID!
}

type Room {
  id: ID!
  name: String
  messages(
    sortDirection: Order
    limit: Int
    nextToken: String
  ): MessageConnection
  createdAt: AWSDateTime
}

enum Order {
  ASC
  DESC
}

type MessageConnection {
  items: [Message]
  nextToken: String
}

type RoomConnection {
  items: [Room]
  nextToken: String
}

type Query {
  listMessagesForRoom(roomId: ID, sortDirection: Order): MessageConnection
  listRooms(limit: Int): RoomConnection
}

type Mutation {
  createMessage(input: MessageInput): Message
  createRoom(name: String!): Room
}

input MessageInput {
  content: String!
  roomId: ID!
}

type Subscription {
  onCreateRoom: Room @aws_subscribe(mutations: ["createRoom"])
  onCreateMessageByRoomId(roomId: ID): Message
    @aws_subscribe(mutations: ["createMessage"])
}
